basePath: /api/v1
definitions:
  user.AuthResponse:
    properties:
      accessToken:
        type: string
      expiresAt:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  user.CreateUserDTO:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      password:
        minLength: 8
        type: string
      patronymic:
        type: string
      username:
        type: string
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  user.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  user.LoginUserDTO:
    properties:
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  user.UserResponse:
    properties:
      createdAt:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      patronymic:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для дипломного проекта
  termsOfService: http://swagger.io/terms/
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные для авторизации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.LoginUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Зарегистрировать новго пользователя
      tags:
      - auth
  /user/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о текущем пользователе
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
